// Import NextAuth and the types used to configure it
import NextAuth from 'next-auth';
import type { NextAuthOptions } from 'next-auth';

// Define the base URL for the Square sandbox environment
const SQUARE_SANDBOX_URL = 'https://connect.squareupsandbox.com';

// --- Type Augmentation Section ---

// Extend the default `Session` and `JWT` types from NextAuth to include Square-specific fields
declare module 'next-auth' {
  interface Session {
    user: {
      id?: string | null;     // Square merchant ID
      name?: string | null;   // Square business name
      email?: string | null; 
    };
    accessToken?: string;     // Our custom addition to the session
  }

  interface JWT {
    accessToken?: string;     // Attach the Square access token to the JWT
  }
}

// --- NextAuth Configuration Section ---

// Define the full NextAuth config object
export const authOptions: NextAuthOptions = {
  // Define a custom OAuth provider for Square
  providers: [
    {
      id: 'square',               // Provider ID used internally
      name: 'Square',             // Display name for the provider
      type: 'oauth',              // Type of auth strategy

      // OAuth2 Authorization URL and parameters
      authorization: {
        url: `${SQUARE_SANDBOX_URL}/oauth2/authorize`,
        params: {
          // Required scopes for accessing merchant, orders, items, and payments
          scope: 'MERCHANT_PROFILE_READ PAYMENTS_READ PAYMENTS_WRITE ITEMS_READ ORDERS_READ',
          session: 'false', 
        },
      },

      // How to exchange the authorization code for access tokens
      token: {
        url: `${SQUARE_SANDBOX_URL}/oauth2/token`,
        async request({params }) {
          console.log('Requesting token with code:', params.code);

          // Make a custom POST request to Square's token endpoint
          const response = await fetch(`${SQUARE_SANDBOX_URL}/oauth2/token`, {
            method: 'POST',
            headers: {
              'Square-Version': '2024-01-01',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              client_id: process.env.NEXT_PUBLIC_SQUARE_APPLICATION_ID,   // from .env
              client_secret: process.env.SQUARE_APPLICATION_SECRET,       // from .env
              code: params.code,                                          // auth code from Square
              grant_type: 'authorization_code',                           // standard OAuth2 grant
              redirect_uri: 'http://localhost:3000/api/auth/callback/square', // must match Square app settings
            }),
          });

          const tokens = await response.json(); // Parse the response
          console.log('Token Response:', tokens);

          if (!response.ok) {
            console.error('Token Error:', tokens);
            throw new Error(tokens.message || 'Failed to get access token');
          }

          // Return the tokens in a format NextAuth expects
          return { tokens };
        },
      },

      // How to fetch the user's profile (merchant data) after authentication
      userinfo: {
        url: `${SQUARE_SANDBOX_URL}/v2/merchants/me`, // Square endpoint to get merchant info
        async request({ tokens }) {
          const response = await fetch(`${SQUARE_SANDBOX_URL}/v2/merchants/me`, {
            headers: {
              Authorization: `Bearer ${tokens.access_token}`,     // Square token
              'Content-Type': 'application/json',
              'Square-Version': '2024-01-01',
            },
          });
          return response.json(); // Return profile JSON to NextAuth
        },
      },

      // Credentials needed for OAuth
      clientId: process.env.NEXT_PUBLIC_SQUARE_APPLICATION_ID,
      clientSecret: process.env.SQUARE_APPLICATION_SECRET,

      // Format Square's profile shape into the shape NextAuth expects
      profile(profile) {
        return {
          id: profile.merchant?.id || 'default-id',            // Square merchant ID
          name: profile.merchant?.business_name || null,       // Store name
          email: null,                                          // Not returned by Square
        };
      },
    },
  ],

  // --- Callback Functions ---

  callbacks: {
    // Called when a JWT is created or updated
    async jwt({ token, account, user }) {
      if (account?.access_token) {
        token.accessToken = account.access_token; // Store Square token in JWT
      }
      return token;
    },

    // Called when a session is created from a JWT
    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.sub; // sub = user ID from JWT
        session.accessToken = token.accessToken as string | undefined; // Expose token to the client
      }
      return session;
    },
  },

  // Enable logging for easier debugging
  debug: true,
};

// Export a Next.js API route handler generated by NextAuth
const handler = NextAuth(authOptions);

// App Router requires both GET and POST handlers to be exported
export { handler as GET, handler as POST };
